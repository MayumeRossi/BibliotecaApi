// <auto-generated />
using System;
using BibliotecaApi.BD;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaApi.Migrations
{
    [DbContext(typeof(BANCO))]
    partial class BANCOModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaApi.Model.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "002.005.755.09",
                            Nome = "Nathalia",
                            Telefone = "3565-4002"
                        },
                        new
                        {
                            Id = 2,
                            Cpf = "045.123.654.87",
                            Nome = "Lucas",
                            Telefone = "9987-6654"
                        },
                        new
                        {
                            Id = 3,
                            Cpf = "321.654.987.01",
                            Nome = "Mariana",
                            Telefone = "3498-1122"
                        },
                        new
                        {
                            Id = 4,
                            Cpf = "785.321.456.10",
                            Nome = "Gustavo",
                            Telefone = "9876-5432"
                        });
                });

            modelBuilder.Entity("BibliotecaApi.Model.Disponibilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DtDevolucao")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DtRetirada")
                        .HasColumnType("date");

                    b.Property<int>("IdCLiente")
                        .HasColumnType("int");

                    b.Property<int>("IdLivro")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("IdCLiente")
                        .IsUnique();

                    b.HasIndex("IdLivro")
                        .IsUnique();

                    b.ToTable("Disponibilidade", (string)null);
                });

            modelBuilder.Entity("BibliotecaApi.Model.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DataLan")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Livros", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Autor = "Markus Zusak",
                            DataLan = "2005",
                            Descricao = "Filha de uma comunista perseguida pelo nazismo, Liesel é adotada por um casal alemão em troca de dinheiro. A menina logo se afeiçoa ao padrasto, Hans, que lhe ensina.",
                            Titulo = "A menina que roubava livros"
                        },
                        new
                        {
                            Id = 2,
                            Autor = "Gayle Forman",
                            DataLan = "2015",
                            Descricao = "A história de Cody, uma jovem que busca respostas após o inesperado suicídio de sua melhor amiga, Meg, desvendando segredos sobre o que pode ter levado sua amiga a tomar essa decisão.",
                            Titulo = "Eu Estive Aqui"
                        },
                        new
                        {
                            Id = 3,
                            Autor = "Stephenie Meyer",
                            DataLan = "2008",
                            Descricao = "Em um mundo onde alienígenas parasitas dominam o corpo e mente dos humanos, Melanie Stryder resiste, mesmo após ter sido capturada, lutando contra a invasão da sua própria consciência.",
                            Titulo = "A Hospedeira"
                        },
                        new
                        {
                            Id = 4,
                            Autor = "Colleen Hoover",
                            DataLan = "2014",
                            Descricao = "Tate Collins e Miles Archer se envolvem em uma relação intensa, com um acordo claro de manter as coisas apenas físicas. No entanto, sentimentos não demoram a surgir, complicando a dinâmica entre eles.",
                            Titulo = "O Lado Feio do Amor"
                        });
                });

            modelBuilder.Entity("BibliotecaApi.Model.Disponibilidade", b =>
                {
                    b.HasOne("BibliotecaApi.Model.Cliente", "Cliente")
                        .WithOne("Disponibilidade")
                        .HasForeignKey("BibliotecaApi.Model.Disponibilidade", "IdCLiente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaApi.Model.Livro", "Livro")
                        .WithOne("Disponibilidade")
                        .HasForeignKey("BibliotecaApi.Model.Disponibilidade", "IdLivro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BibliotecaApi.Model.Cliente", b =>
                {
                    b.Navigation("Disponibilidade")
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaApi.Model.Livro", b =>
                {
                    b.Navigation("Disponibilidade")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
